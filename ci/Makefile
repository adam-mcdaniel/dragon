
workerdirs := /home/adam/Desktop/dragon-cxx/ci/ci-worker /home/adam/Desktop/dragon-cxx/ci/vm-worker /home/adam/Desktop/dragon-cxx/ci/compiler-worker /home/adam/Desktop/dragon-cxx/ci/release-worker
masterdir := "master"


all: start

build: install_deps
	. venv/bin/activate; buildbot create-master $(masterdir);
	python3 -c "print(\"\n# -*- python -*-\n# ex: set filetype=python:\nimport re\nfrom buildbot.plugins import *\n\n# This is a sample buildmaster config file. It must be installed as\n# 'master.cfg' in your buildmaster's base directory.\n\n# This is the dictionary that the buildmaster pays attention to. We also use\n# a shorter alias to save typing.\nc = BuildmasterConfig = {}\n\n####### WORKERS\n\n# The 'workers' list defines the set of recognized workers. Each element is\n# a Worker object, specifying a unique worker name and password.  The same\n# worker name and password must be configured on the worker.\nc['workers'] = [worker.Worker('dragon-ci-worker', 'pass'), worker.Worker('dragon-vm-worker', 'pass'), worker.Worker('dragon-compiler-worker', 'pass'), worker.Worker('dragon-release-worker', 'pass')]\nc['protocols'] = {'pb': {'port': 9989}}\n\n\nc['change_source'] = []\nc['change_source'].append(changes.GitPoller(\n        'https://github.com/adam-mcdaniel/dragon',\n        workdir='gitpoller-workdir', branches=True, # poll all branches\n        pollInterval=5))\n\nc['schedulers'] = []\nc['builders'] = []\n\n\n@util.renderer\ndef ci_change_triggers(props):\n    builders = ['dragon-ci']\n\n    triggers = ['.*\\.yaml', '.*Makefile', '.*\\.sh']\n\n    for f in props.files:\n        for regex in triggers:\n            if re.match(regex, str(f)):\n                return builders\n\n    return []\n\nc['schedulers'].append(schedulers.AnyBranchScheduler(name='ci_change',\n    change_filter=util.ChangeFilter(branch_re='.*'),\n    builderNames=ci_change_triggers))\n\nc['schedulers'].append(schedulers.ForceScheduler(name='force_ci_change',\n    builderNames=['dragon-ci']))\n\n\n\n@util.renderer\ndef vm_change_triggers(props):\n    builders = ['dragon-vm-build']\n\n    triggers = ['.*\\.cpp', '.*\\.hpp', '.*\\.cmake', '.*CMakeLists\\.txt']\n\n    for f in props.files:\n        for regex in triggers:\n            if re.match(regex, str(f)):\n                return builders\n\n    return []\n\nc['schedulers'].append(schedulers.AnyBranchScheduler(name='vm_change',\n    change_filter=util.ChangeFilter(branch_re='.*'),\n    builderNames=vm_change_triggers))\n\nc['schedulers'].append(schedulers.ForceScheduler(name='force_vm_change',\n    builderNames=['dragon-vm-build']))\n\n\n\n@util.renderer\ndef release_check_triggers(props):\n    builders = ['dragon-ci', 'dragon-release', 'dragon-compiler-build', 'dragon-vm-build']\n\n    triggers = ['.*']\n\n    for f in props.files:\n        for regex in triggers:\n            if re.match(regex, str(f)):\n                return builders\n\n    return []\n\nc['schedulers'].append(schedulers.AnyBranchScheduler(name='release_check',\n    change_filter=util.ChangeFilter(branch_re='master'),\n    builderNames=release_check_triggers))\n\nc['schedulers'].append(schedulers.ForceScheduler(name='force_release_check',\n    builderNames=['dragon-ci', 'dragon-release', 'dragon-compiler-build', 'dragon-vm-build']))\n\n\n\n@util.renderer\ndef compiler_change_triggers(props):\n    builders = ['dragon-compiler-build']\n\n    triggers = ['.*\\.py']\n\n    for f in props.files:\n        for regex in triggers:\n            if re.match(regex, str(f)):\n                return builders\n\n    return []\n\nc['schedulers'].append(schedulers.AnyBranchScheduler(name='compiler_change',\n    change_filter=util.ChangeFilter(branch_re='.*'),\n    builderNames=compiler_change_triggers))\n\nc['schedulers'].append(schedulers.ForceScheduler(name='force_compiler_change',\n    builderNames=['dragon-compiler-build']))\n\n\ntemp_factory = util.BuildFactory()\ntemp_factory.addStep(steps.Git(repourl='https://github.com/adam-mcdaniel/dragon', mode='incremental', branch='master', method='clobber', submodules=True))\ntemp_factory.addStep(steps.ShellCommand(command=['chmod', '+x', './run.sh'], workdir='./build/ci'))\ntemp_factory.addStep(steps.ShellCommand(command=['./run.sh'], workdir='./build/ci'))\nc['builders'].append(\n    util.BuilderConfig(name='dragon-ci',\n    workernames=['dragon-ci-worker'],\n    factory=temp_factory))\n        \n\n\ntemp_factory = util.BuildFactory()\ntemp_factory.addStep(steps.Git(repourl='https://github.com/adam-mcdaniel/dragon', mode='incremental', branch='master', method='clobber', submodules=True))\ntemp_factory.addStep(steps.ShellCommand(command=['echo', 'test'], workdir='./build'))\nc['builders'].append(\n    util.BuilderConfig(name='dragon-release',\n    workernames=['dragon-release-worker'],\n    factory=temp_factory))\n        \n\n\ntemp_factory = util.BuildFactory()\ntemp_factory.addStep(steps.Git(repourl='https://github.com/adam-mcdaniel/dragon', mode='incremental', branch='master', method='clobber', submodules=True))\ntemp_factory.addStep(steps.ShellCommand(command=['rm', '-Rf', 'build'], workdir='./build'))\ntemp_factory.addStep(steps.ShellCommand(command=['mkdir', 'build'], workdir='./build'))\ntemp_factory.addStep(steps.ShellCommand(command=['cmake', '..'], workdir='./build/build'))\ntemp_factory.addStep(steps.ShellCommand(command=['make', '-j'], workdir='./build/build'))\ntemp_factory.addStep(steps.ShellCommand(command=['./dragon'], workdir='./build/build'))\nc['builders'].append(\n    util.BuilderConfig(name='dragon-vm-build',\n    workernames=['dragon-vm-worker'],\n    factory=temp_factory))\n        \n\n\ntemp_factory = util.BuildFactory()\ntemp_factory.addStep(steps.Git(repourl='https://github.com/adam-mcdaniel/dragon', mode='incremental', branch='master', method='clobber', submodules=True))\ntemp_factory.addStep(steps.ShellCommand(command=['python3', '-m', 'pip', 'install', '-U', 'lark-parser'], workdir='./build'))\ntemp_factory.addStep(steps.ShellCommand(command=['python3', 'compiler/main.py', '-f', 'examples/script.dn'], workdir='./build'))\ntemp_factory.addStep(steps.ShellCommand(command=['python3', 'compiler/main.py', '-f', 'examples/hello_world.dn'], workdir='./build'))\ntemp_factory.addStep(steps.ShellCommand(command=['python3', 'compiler/main.py', '-f', 'examples/loops.dn'], workdir='./build'))\ntemp_factory.addStep(steps.ShellCommand(command=['python3', 'compiler/main.py', '-f', 'examples/math.dn'], workdir='./build'))\ntemp_factory.addStep(steps.ShellCommand(command=['python3', 'compiler/main.py', '-f', 'examples/extern.dn'], workdir='./build'))\nc['builders'].append(\n    util.BuilderConfig(name='dragon-compiler-build',\n    workernames=['dragon-compiler-worker'],\n    factory=temp_factory))\n        \n\nc['services'] = []\n\nc['title'] = 'Dragon CI'\nc['titleURL'] = 'https://github.com/adam-mcdaniel/dragon'\n\nc['buildbotURL'] = 'http://localhost:8010/'\n\nc['www'] = dict(port=8010,\n                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))\n\nc['db'] = {\n    # This specifies what database buildbot uses to store its state.  You can leave\n    # this at its default for all but the largest installations.\n    'db_url' : 'sqlite:///state.sqlite',\n}\n        \")" > $(masterdir)/master.cfg
	
	mkdir -p /home/adam/Desktop/dragon-cxx/ci/ci-worker
	-. venv/bin/activate; buildbot-worker create-worker /home/adam/Desktop/dragon-cxx/ci/ci-worker localhost /home/adam/Desktop/dragon-cxx/ci/ci-worker pass
	python3 -c "print(\"import os\n\nfrom buildbot_worker.bot import Worker\nfrom twisted.application import service\n\nbasedir = '/home/adam/Desktop/dragon-cxx/ci/ci-worker'\nrotateLength = 10000000\nmaxRotatedFiles = 10\n\n# if this is a relocatable tac file, get the directory containing the TAC\nif basedir == '.':\n    import os.path\n    basedir = os.path.abspath(os.path.dirname(__file__))\n\n# note: this line is matched against to check that this is a worker\n# directory; do not edit it.\napplication = service.Application('buildbot-worker')\n\nfrom twisted.python.logfile import LogFile\nfrom twisted.python.log import ILogObserver, FileLogObserver\nlogfile = LogFile.fromFullPath(\n    os.path.join(basedir, 'twistd.log'), rotateLength=rotateLength,\n    maxRotatedFiles=maxRotatedFiles)\napplication.setComponent(ILogObserver, FileLogObserver(logfile).emit)\n\nbuildmaster_host = 'localhost'\nport = 9989\nworkername = 'dragon-ci-worker'\npasswd = 'pass'\nkeepalive = 600\numask = None\nmaxdelay = 300\nnumcpus = None\nallow_shutdown = None\nmaxretries = None\n\ns = Worker(buildmaster_host, port, workername, passwd, basedir,\n           keepalive, umask=umask, maxdelay=maxdelay,\n           numcpus=numcpus, allow_shutdown=allow_shutdown,\n           maxRetries=maxretries)\ns.setServiceParent(application)\")" > /home/adam/Desktop/dragon-cxx/ci/ci-worker/buildbot.tac


	mkdir -p /home/adam/Desktop/dragon-cxx/ci/vm-worker
	-. venv/bin/activate; buildbot-worker create-worker /home/adam/Desktop/dragon-cxx/ci/vm-worker localhost /home/adam/Desktop/dragon-cxx/ci/vm-worker pass
	python3 -c "print(\"import os\n\nfrom buildbot_worker.bot import Worker\nfrom twisted.application import service\n\nbasedir = '/home/adam/Desktop/dragon-cxx/ci/vm-worker'\nrotateLength = 10000000\nmaxRotatedFiles = 10\n\n# if this is a relocatable tac file, get the directory containing the TAC\nif basedir == '.':\n    import os.path\n    basedir = os.path.abspath(os.path.dirname(__file__))\n\n# note: this line is matched against to check that this is a worker\n# directory; do not edit it.\napplication = service.Application('buildbot-worker')\n\nfrom twisted.python.logfile import LogFile\nfrom twisted.python.log import ILogObserver, FileLogObserver\nlogfile = LogFile.fromFullPath(\n    os.path.join(basedir, 'twistd.log'), rotateLength=rotateLength,\n    maxRotatedFiles=maxRotatedFiles)\napplication.setComponent(ILogObserver, FileLogObserver(logfile).emit)\n\nbuildmaster_host = 'localhost'\nport = 9989\nworkername = 'dragon-vm-worker'\npasswd = 'pass'\nkeepalive = 600\numask = None\nmaxdelay = 300\nnumcpus = None\nallow_shutdown = None\nmaxretries = None\n\ns = Worker(buildmaster_host, port, workername, passwd, basedir,\n           keepalive, umask=umask, maxdelay=maxdelay,\n           numcpus=numcpus, allow_shutdown=allow_shutdown,\n           maxRetries=maxretries)\ns.setServiceParent(application)\")" > /home/adam/Desktop/dragon-cxx/ci/vm-worker/buildbot.tac


	mkdir -p /home/adam/Desktop/dragon-cxx/ci/compiler-worker
	-. venv/bin/activate; buildbot-worker create-worker /home/adam/Desktop/dragon-cxx/ci/compiler-worker localhost /home/adam/Desktop/dragon-cxx/ci/compiler-worker pass
	python3 -c "print(\"import os\n\nfrom buildbot_worker.bot import Worker\nfrom twisted.application import service\n\nbasedir = '/home/adam/Desktop/dragon-cxx/ci/compiler-worker'\nrotateLength = 10000000\nmaxRotatedFiles = 10\n\n# if this is a relocatable tac file, get the directory containing the TAC\nif basedir == '.':\n    import os.path\n    basedir = os.path.abspath(os.path.dirname(__file__))\n\n# note: this line is matched against to check that this is a worker\n# directory; do not edit it.\napplication = service.Application('buildbot-worker')\n\nfrom twisted.python.logfile import LogFile\nfrom twisted.python.log import ILogObserver, FileLogObserver\nlogfile = LogFile.fromFullPath(\n    os.path.join(basedir, 'twistd.log'), rotateLength=rotateLength,\n    maxRotatedFiles=maxRotatedFiles)\napplication.setComponent(ILogObserver, FileLogObserver(logfile).emit)\n\nbuildmaster_host = 'localhost'\nport = 9989\nworkername = 'dragon-compiler-worker'\npasswd = 'pass'\nkeepalive = 600\numask = None\nmaxdelay = 300\nnumcpus = None\nallow_shutdown = None\nmaxretries = None\n\ns = Worker(buildmaster_host, port, workername, passwd, basedir,\n           keepalive, umask=umask, maxdelay=maxdelay,\n           numcpus=numcpus, allow_shutdown=allow_shutdown,\n           maxRetries=maxretries)\ns.setServiceParent(application)\")" > /home/adam/Desktop/dragon-cxx/ci/compiler-worker/buildbot.tac


	mkdir -p /home/adam/Desktop/dragon-cxx/ci/release-worker
	-. venv/bin/activate; buildbot-worker create-worker /home/adam/Desktop/dragon-cxx/ci/release-worker localhost /home/adam/Desktop/dragon-cxx/ci/release-worker pass
	python3 -c "print(\"import os\n\nfrom buildbot_worker.bot import Worker\nfrom twisted.application import service\n\nbasedir = '/home/adam/Desktop/dragon-cxx/ci/release-worker'\nrotateLength = 10000000\nmaxRotatedFiles = 10\n\n# if this is a relocatable tac file, get the directory containing the TAC\nif basedir == '.':\n    import os.path\n    basedir = os.path.abspath(os.path.dirname(__file__))\n\n# note: this line is matched against to check that this is a worker\n# directory; do not edit it.\napplication = service.Application('buildbot-worker')\n\nfrom twisted.python.logfile import LogFile\nfrom twisted.python.log import ILogObserver, FileLogObserver\nlogfile = LogFile.fromFullPath(\n    os.path.join(basedir, 'twistd.log'), rotateLength=rotateLength,\n    maxRotatedFiles=maxRotatedFiles)\napplication.setComponent(ILogObserver, FileLogObserver(logfile).emit)\n\nbuildmaster_host = 'localhost'\nport = 9989\nworkername = 'dragon-release-worker'\npasswd = 'pass'\nkeepalive = 600\numask = None\nmaxdelay = 300\nnumcpus = None\nallow_shutdown = None\nmaxretries = None\n\ns = Worker(buildmaster_host, port, workername, passwd, basedir,\n           keepalive, umask=umask, maxdelay=maxdelay,\n           numcpus=numcpus, allow_shutdown=allow_shutdown,\n           maxRetries=maxretries)\ns.setServiceParent(application)\")" > /home/adam/Desktop/dragon-cxx/ci/release-worker/buildbot.tac

start: build
	. venv/bin/activate; buildbot stop master; buildbot reconfig master; buildbot cleanupdb master; buildbot start master;
	-. venv/bin/activate; $(foreach dir,$(workerdirs),buildbot-worker restart $(dir);)


install_deps:
	sudo apt-get install python3-dev -y
	sudo apt-get install python3-pip -y
	sudo apt-get install python3-venv -y

	python3 -m venv venv
	. venv/bin/activate; python3 -m pip install -U pip; python3 -m pip install 'buildbot[bundle]';
	. venv/bin/activate; python3 -m pip install buildbot-worker setuptools-trial


